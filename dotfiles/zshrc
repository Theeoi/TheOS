# 
# .zshrc by Theodor Blom
# based on oh-my-zsh
#

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# XDG variables
export XDG_DATA_HOME=$HOME/.local/share
export XDG_CONFIG_HOME=$HOME/.config
export XDG_STATE_HOME=$HOME/.local/state
export XDG_CACHE_HOME=$HOME/.cache

# Path to your oh-my-zsh installation.
export ZSH="$XDG_CONFIG_HOME/oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="robbyrussell"
ZSH_THEME="intheloop"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

### User configuration ###

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='nvim'
else
  export EDITOR='nvim'
fi
set -o vi # Vim movements in commandline

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.

alias zshconfig="$EDITOR $XDG_CONFIG_HOME/zsh/.zshrc" # easy access to this file
alias nvimconfig="$EDITOR $XDG_CONFIG_HOME/nvim/lua/user/init.lua"
alias cp="cp -i"                                      # confirm before overwriting something
alias mv="mv -i"                                      # confirm before overwriting something
alias df='df -h'                                      # human-readable sizes
alias rm="irm"                                        # use irm (function below) as default 

# Enable zsh history
alias history="history -i"                            # history with timestamps
export HISTFILE=~/.zhistory
export HISTSIZE=100000
export HISTFILESIZE=100000

setopt HIST_IGNORE_ALL_DUPS
setopt HIST_SAVE_NO_DUPS
setopt HIST_REDUCE_BLANKS
setopt INC_APPEND_HISTORY_TIME
setopt EXTENDED_HISTORY

# XDG compliance
export CUDA_CACHE_PATH="$XDG_CACHE_HOME"/nv
export GTK2_RC_FILES="$XDG_CONFIG_HOME"/gtk-2.0/gtkrc
export KDEHOME="$XDG_CONFIG_HOME"/kde
alias svn="svn --config-dir $XDG_CONFIG_HOME/subversion"
export XINITRC="$XDG_CONFIG_HOME"/X11/xinitrc
autoload -Uz compinit
compinit -d "$XDG_CACHE_HOME"/zsh/zcompdump-"$ZSH_VERSION"
export GNUPGHOME="$XDG_DATA_HOME"/gnupg
export TEXMFVAR="$XDG_CACHE_HOME"/texlive/texmf-var
alias wget=wget --hsts-file="$XDG_DATA_HOME/wget-hsts"
export PYTHONSTARTUP=$XDG_CACHE_HOME/python/pythonrc

### Functions ###

# Easily search full zsh history
function hg() {
  history 0 | grep "$1";
}

# ex - archive extractor
# usage: ex <file>
function ex () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

## An implementation of a wastebasket for the rm command.
# Taken from: https://github.com/beala/irm/blob/master/irm.sh
TRASH="$HOME/.local/share/Trash/files"  #The trashcan directory within your home directory

function irm() {

  #Check to make sure there are arguments to operate on.
  if [ $# = 0 ]; then
    echo "No arguments provided."
    echo "Type irm -e to empty the trash."
    echo "Type irm [file1 file2 ...] to delete file1 file2 etc."
    return
  fi

  #Check to make sure the trashcan exists.
  if [ ! -e "$TRASH" ];then
    echo "$TRASH does not exist. Would you like to create it? Y/N"
    read INPUT

    if [[ $INPUT = "Y" || $INPUT = "y" ]]; then
      mkdir "$TRASH"
      echo "Trashcan created."
    else
      echo "Ok, no trashcan was created and no files were deleted."
      return
    fi
  fi

  #Check for the -e flag, which empties the trash.
  if [ "$1" = "-e" ]; then
    echo "Are you sure you wish to empty the trash? Y/N"
    read VERIFY

    if [[ $VERIFY = "Y" || $VERIFY = "y" ]]; then
      \rm -rf "$TRASH"/*
      echo "Trash emptied."
    else
      echo "Ok, nothing has been deleted."
    fi

    return
  fi

  #Finally, move the specified files to the trash.
  SAVEIFS=$IFS
  IFS=$(echo -en "\n\b")

  for i in $*; do
    if [ -e "$i" ]; then #Make sure each file exists before moving.
      if [ -e "$TRASH/$i" ]; then #Make sure we're not overwriting a trashed file.
        echo "A file named $i already exists in the trashcan. Overwrite? Y/N"
        read INPUT
        if [[ $INPUT = "Y" || $INPUT = "y" ]]; then
          \rm -rf "$TRASH/$i"
        else
          echo "Ok, $i was not deleted. Continuing..."
          continue
        fi
      fi
      mv "$i" "$TRASH/"
    else
      echo "File $i does not exist."
    fi
  done

  IFS=$SAVEIFS
}
